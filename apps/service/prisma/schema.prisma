datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator db {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

model Account {
  id            String         @id @default(uuid())
  email         String         @unique
  devices       Device[]
  refreshTokens RefreshToken[]
  collections   Collection[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deviceId  String
  accountId String
  account   Account  @relation(fields: [accountId], references: [id])
}

model Device {
  id         String   @id @default(cuid())
  // OS-level id of the device
  deviceId   String   @unique
  // Not authorized if the device hasn't been connected to an account
  authorized Boolean  @default(false)
  // Won't have a device name until account creation
  name       String?
  code       String
  lastSeen   DateTime @updatedAt

  // If the device is following a collection
  following   Collection? @relation(fields: [followingId], references: [id])
  followingId Int?

  // If the device has set a specific wallpaper (not following a collection)
  wallpaper   Wallpaper? @relation(fields: [wallpaperId], references: [id])
  wallpaperId Int?

  accountId String?
  account   Account? @relation(fields: [accountId], references: [id])
}

model Wallpaper {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  u_url     String   @unique

  devices Device[]

  collections CollectionWallpaper[]
}

model Collection {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  official  Boolean

  owner   Account @relation(fields: [ownerId], references: [id])
  ownerId String

  wallpapers CollectionWallpaper[]

  devices Device[]
}

model CollectionWallpaper {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  collection Collection @relation(fields: [collectionId], references: [id])
  wallpaper  Wallpaper  @relation(fields: [wallpaperId], references: [id])

  collectionId Int
  wallpaperId  Int

  @@unique([collectionId, wallpaperId])
}
